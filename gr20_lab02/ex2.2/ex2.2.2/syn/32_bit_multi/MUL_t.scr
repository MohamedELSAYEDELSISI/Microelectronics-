##############################################################
#SCRIPT FOR SPEEDING UP and RECORDING the MULTIPLIER SYNTHESIS#
# analyzing and checking vhdl netlist#
# here the analyze command is used for each file from bottom to top #
##############################################################
#analyze -library WORK -format vhdl {constants.vhd}
analyze -library WORK -format vhdl {BOOTHMUL.vhd}
# fill these lines with your files ...
#analyze -library WORK -format vhdl {   }
#analyze -library WORK -format vhdl {   }
##############################################################
# elaborating the top entity -- here supposed BOOTHMUL#
# choose the architecture you want
elaborate BOOTHMUL -architecture Behavioral -library work 
##########################################
# first compilation, without constraints #
compile 
# reporting riming and power after the first synthesis without constraints #
report_timing > timeopt_1t.txt
report_area > areaop_1a.txt
# forces a combinational max delay of REQUIRED_TIME from each of the inputs
# to each of th eoutput, that is a delay lower than the one found after
# the first compilation step #
# often this is the working clock period of your system #
set_max_delay 10 -from {Multiplicand_1 Multiplier_2} -to {result}
# optimize
compile -map_effort high
# save report
report_timing > timeopt_2t.txt
report_area > areaop_2a.txt
# saving files
write -hierarchy -format ddc -output BOOTHMUL-structural-topt.ddc
write -hierarchy -format vhdl -output BOOTHMUL-structural-topt.vhdl
write -hierarchy -format verilog -output BOOTHMUL-structural-topt.v
